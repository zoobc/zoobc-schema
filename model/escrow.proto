/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax = "proto3";

package model;
option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/pagination.proto";

message Escrow {
    int64 ID = 1 [ jstype = JS_STRING ];
    bytes SenderAddress = 2;
    bytes RecipientAddress = 3;
    bytes ApproverAddress = 4;
    int64 Amount = 5 [ jstype = JS_STRING ];
    int64 Commission = 6 [ jstype = JS_STRING ];
    // Timeout is BlockHeight gap 
    int64 Timeout = 7 [ jstype = JS_STRING ];
    EscrowStatus Status = 8;
    uint32 BlockHeight = 9;
    bool Latest = 10;
    string Instruction = 11;
}
enum EscrowStatus {
    Pending = 0;
    Approved = 1;
    Rejected = 2;
    Expired = 3;
}

enum EscrowApproval {
    Approve = 0;
    Reject = 1;
    Expire = 2;
}

// GetEscrowTransactionsRequest message for get escrow transactions
message GetEscrowTransactionsRequest {
    bytes ApproverAddress = 1;
    bytes SenderAddress = 2;
    bytes RecipientAddress = 3;
    int64 ID = 4 [jstype = JS_STRING];
    repeated EscrowStatus  Statuses = 5;
    uint32 BlockHeightStart = 6;
    uint32 BlockHeightEnd = 7;
    bool Latest = 8;
    Pagination Pagination = 9;
}
// GetEscrowTransactionsResponse returns fields of GetEscrowTransactionsRequest
message GetEscrowTransactionsResponse {
    // Number of transactions in total
    uint64 Total = 1 [ jstype = JS_STRING ];
    // Transaction transactions returned
    repeated Escrow Escrows = 2;
}

// GetEscrowTransactionRequest represents GetEscrowTransaction parameter
message GetEscrowTransactionRequest {
    int64 ID = 1 [jstype = JS_STRING];
}