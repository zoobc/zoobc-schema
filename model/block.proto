syntax = "proto3";

package model;

option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/transaction.proto";
import "model/receipt.proto";

// Block represent the block data structure stored in the database
message Block {
  int64 ID = 1 [ jstype = JS_STRING ];
  bytes PreviousBlockHash = 2;
  uint32 Height = 3;
  int64 Timestamp = 4 [ jstype = JS_STRING ];
  bytes BlockSeed = 5;
  bytes BlockSignature = 6;
  string CumulativeDifficulty = 7;
  int64 SmithScale = 8 [ jstype = JS_STRING ];
  bytes BlocksmithPublicKey = 9;
  int64 TotalAmount = 10 [ jstype = JS_STRING ];
  int64 TotalFee = 11 [ jstype = JS_STRING ];
  int64 TotalCoinBase = 12 [ jstype = JS_STRING ];
  uint32 Version = 13;
  uint32 PayloadLength = 14;
  bytes PayloadHash = 15;
  repeated Transaction Transactions = 16;
  repeated BlockReceipt BlockReceipts = 17;
}

message BlockReceipt {
    Receipt Receipt = 1;
    repeated bytes IntermediateHashes = 2;
}

// BlockExtendedInfo represent the Block data plus part of block data not to be persisted to database
message BlockExtendedInfo {
  Block Block = 1;
  int64 TotalReceipts = 2 [ jstype = JS_STRING ];
  int64 ReceiptValue = 3 [ jstype = JS_STRING ];
  string BlocksmithAccountAddress = 4;
  int64 PopChange = 5 [ jstype = JS_STRING ];
}

// GetBlockRequest create request for single block
message GetBlockRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  // Block ID
  int64 ID = 2 [ jstype = JS_STRING ];
  // number of block to fetch
  uint32 Height = 3;
}

// GetBlocksRequest create request to get a list block
message GetBlocksRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  // Number of block to fetch
  uint32 Limit = 2;
  // Fetch block from `n` height
  uint32 Height = 3;
}

message GetBlocksResponse {
  // Number indicating chaintype
  int32 ChainType = 1;
  // Number of block returned
  uint32 Count = 2;
  // Blocks height returned from
  uint32 Height = 3;
  // Blocks returned
  repeated BlockExtendedInfo Blocks = 4;
}

message GetNextBlockIdsRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  int64 BlockId = 2 [ jstype = JS_STRING ];
  uint32 Limit = 3;
}
message BlockIdsResponse { repeated int64 BlockIds = 1 [ jstype = JS_STRING ]; }

message GetNextBlocksRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  int64 BlockId = 2 [ jstype = JS_STRING ];
  repeated int64 BlockIds = 3 [ jstype = JS_STRING ];
}

message BlocksData { repeated Block NextBlocks = 1; }

message SendBlockRequest {
  Block Block = 1;
  int32 ChainType = 2;
  bytes SenderPublicKey = 3;
}