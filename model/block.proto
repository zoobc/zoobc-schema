syntax = "proto3";

package model;
option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/transaction.proto";
import "model/batchReceipt.proto";
import "model/publishedReceipt.proto";
import "model/skippedBlocksmith.proto";
import "model/spine.proto";
import "model/spineBlockManifest.proto";

// Block represent the block data structure stored in the database
message Block {
  int64 ID = 1 [ jstype = JS_STRING ];
  bytes BlockHash = 2;
  bytes PreviousBlockHash = 3;
  uint32 Height = 4;
  int64 Timestamp = 5 [ jstype = JS_STRING ];
  bytes BlockSeed = 6;
  bytes BlockSignature = 7;
  string CumulativeDifficulty = 8;
  bytes BlocksmithPublicKey = 9;
  int64 TotalAmount = 10 [ jstype = JS_STRING ];
  int64 TotalFee = 11 [ jstype = JS_STRING ];
  int64 TotalCoinBase = 12 [ jstype = JS_STRING ];
  uint32 Version = 13;
  uint32 PayloadLength = 14;
  bytes PayloadHash = 15;
  bytes MerkleRoot = 16;
  bytes MerkleTree = 17;
  uint32 ReferenceBlockHeight = 18;
  repeated Transaction Transactions = 19;
  repeated PublishedReceipt PublishedReceipts = 20;
  repeated SpinePublicKey SpinePublicKeys = 21;
  repeated SpineBlockManifest SpineBlockManifests = 22;
  repeated int64 TransactionIDs = 23;
}

// BlockExtendedInfo represent the Block data plus part of block data not to be persisted to database
message BlockExtendedInfo {
  Block Block = 1;
  int64 TotalReceipts = 2 [ jstype = JS_STRING ];
  int64 ReceiptValue = 3 [ jstype = JS_STRING ];
  bytes BlocksmithAccountAddress = 4;
  int64 PopChange = 5 [ jstype = JS_STRING ];
  repeated SkippedBlocksmith SkippedBlocksmiths = 6;
}

// GetBlockRequest create request for single block
message GetBlockRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  // Block ID
  int64 ID = 2 [ jstype = JS_STRING ];
  // number of block to fetch
  uint32 Height = 3;
}

message GetBlockResponse {
  // Number indicating chaintype
  int32 ChainType = 1;
   // Block returned
  Block Block = 2;
}

// GetBlocksRequest create request to get a list block
message GetBlocksRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  // Number of block to fetch
  uint32 Limit = 2;
  // Fetch block from `n` height
  uint32 Height = 3;
}

message GetBlocksResponse {
  // Number indicating chaintype
  int32 ChainType = 1;
  // Number of block returned
  uint32 Count = 2;
  // Blocks height returned from
  uint32 Height = 3;
  // Blocks returned
  repeated Block Blocks = 4;
}

message GetNextBlockIdsRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  int64 BlockId = 2 [ jstype = JS_STRING ];
  uint32 Limit = 3;
}
message BlockIdsResponse { repeated int64 BlockIds = 1 [ jstype = JS_STRING ]; }

message GetNextBlocksRequest {
  // Number indicating chaintype
  int32 ChainType = 1;
  int64 BlockId = 2 [ jstype = JS_STRING ];
  repeated int64 BlockIds = 3 [ jstype = JS_STRING ];
}

message BlocksData { repeated Block NextBlocks = 1; }

message SendBlockRequest {
    Block Block = 1;
    int32 ChainType = 2;
    bytes SenderPublicKey = 3;
}
message SendBlockResponse {
    BatchReceipt BatchReceipt = 1;
}