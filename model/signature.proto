/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax = "proto3";

package model;
option go_package = "github.com/zoobc/zoobc-core/common/model";

enum SignatureType {
    // in bytes: []byte{0,0,0,0}, using Ed25519 signature algorithm 
    DefaultSignature = 0;
    // in bytes: []byte{1,0,0,0}, bitcoin uses a specific Koblitz curve secp256k1
    // Koblitz curves are a type of Elliptic Curve Digital Signature Algorithm
    BitcoinSignature = 1;
    // in bytes: []byte{2,0,0,0} for multisig validation purpose only
    MultisigSignature = 2;
    // in bytes: []byte{3,0,0,0} for estonian eID validation purpose only
    EstoniaEidSignature = 3;
    // in bytes: []byte{4,0,0,0}, eth uses ECDSA signing algorithm
    EthereumSignature = 4;
}

// BitcoinPrivateKeyBytesLength represent the length of private key that can use
enum PrivateKeyBytesLength {
    PrivateKeyInvalid = 0;
    PrivateKey256Bits =32;
    PrivateKey384Bits = 48;
    PrivateKey512Bits = 64;
}

// BitcoinPublicKeyFormat represent the option of the Bitcoin public key format that can use
//  public key format : https://bitcoin.org/en/wallets-guide#public-key-formats
enum BitcoinPublicKeyFormat {
    PublicKeyFormatUncompressed = 0;
    PublicKeyFormatCompressed = 1;
}