/* ZooBC zoobc-schema
*
* Copyright Â© 2020 Quasisoft Limited - Hong Kong
*
* ZooBC is architected by Roberto Capodieci & Barton Johnston
*             contact us at roberto.capodieci[at]blockchainzoo.com
*             and barton.johnston[at]blockchainzoo.com
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. */
syntax = "proto3";

package model;
option go_package = "github.com/zoobc/zoobc-core/common/model";

import "model/pagination.proto";

message MultiSignatureInfo {
    uint32 MinimumSignatures = 1;
    int64 Nonce = 2 [ jstype = JS_STRING ];
    bytes MultisigAddress = 3;
    uint32 BlockHeight = 4;
    bool Latest = 5;
    repeated bytes Addresses = 6;
}

// represent the signature posted by account
message SignatureInfo {
    bytes TransactionHash = 1;
    map<string, bytes> Signatures = 2; 
}
// represent the multi signature's participant account addresses
message MultiSignatureParticipant {
    bytes MultiSignatureAddress = 1;
    bytes AccountAddress = 2;
    uint32 AccountAddressIndex = 3;
    bool Latest = 4;
    uint32 BlockHeight = 5;
}
// represent the pending signature counter stored by node for multi-signature transaction
message PendingSignature {
    bytes TransactionHash = 1;
    bytes AccountAddress = 2;
    bytes MultiSignatureAddress =3;
    bytes Signature = 4;
    uint32 BlockHeight = 5;
    bool Latest = 6;
}

// represent transaction inside multisig body
message PendingTransaction {
    bytes SenderAddress = 1;
    bytes TransactionHash = 2;
    bytes TransactionBytes = 3;
    PendingTransactionStatus Status = 4;
    uint32 BlockHeight = 5;
    bool Latest = 6;
}

enum PendingTransactionStatus {
    PendingTransactionPending = 0;
    PendingTransactionExecuted = 1;
    PendingTransactionNoOp = 2;
    PendingTransactionExpired = 3;
}

// API model

message GetPendingTransactionsRequest {
    bytes SenderAddress = 1;
    PendingTransactionStatus Status = 2;
    Pagination Pagination = 3;
}

message GetPendingTransactionsResponse {
    // Number of item in current page
    uint32 Count = 1;
    // Starting page
    uint32 Page = 2;
    // content of the request
    repeated PendingTransaction PendingTransactions = 3;
}

message GetPendingTransactionDetailByTransactionHashRequest {
    // hex of transaction hash
    string TransactionHashHex = 1;
}

message GetPendingTransactionDetailByTransactionHashResponse {
    PendingTransaction PendingTransaction = 1;
    repeated PendingSignature PendingSignatures = 2;
    MultiSignatureInfo MultiSignatureInfo = 3;
}

message GetMultisignatureInfoRequest {
    bytes MultisigAddress = 1;
    Pagination Pagination = 2;
}

message GetMultisignatureInfoResponse {
    // Number of item in current page
    uint32 Count = 1;
    // Starting page
    uint32 Page = 2;
    // content of the request
    repeated MultiSignatureInfo MultisignatureInfo = 3;
}

message GetMultisigAddressByParticipantAddressRequest {
    bytes ParticipantAddress = 1;
    Pagination Pagination = 2;
}

message GetMultisigAddressByParticipantAddressResponse {
    // Total of participant address
    uint32 Total = 1;
    // content of the request
    repeated bytes MultisigAddresses = 2;
}

message GetPendingTransactionsByHeightRequest {
    // Starting Height (inclusive) of request
    uint32 FromHeight = 1;
    // Ending Height (inclusive) of request
    uint32 ToHeight = 2;
}

message GetPendingTransactionsByHeightResponse {
    // List of pending transaction within requested height
    repeated PendingTransaction PendingTransactions = 1;
}

message GetMultisigAddressesByBlockHeightRangeRequest {
    uint32 FromBlockHeight = 1;
    uint32 ToBlockHeight = 2;
    Pagination Pagination = 3;
}

message GetMultisigAddressesByBlockHeightRangeResponse {
    // Number of item in current page
    uint32 Count = 1;
    // Starting page
    uint32 Page = 2;
    // content of the request
    repeated MultiSignatureInfo MultisignatureInfo = 3;
}

message GetParticipantsByMultisigAddressesRequest {
    repeated bytes MultisigAddresses = 1;
    Pagination Pagination = 2;
}

message MultiSignatureParticipants {
    repeated MultiSignatureParticipant MultiSignatureParticipants = 1;
}

message GetParticipantsByMultisigAddressesResponse {
    uint32 Total = 1;
    map<string, MultiSignatureParticipants> MultiSignatureParticipants = 2;
}